- vfinish = 0
- if @datastr.class.ancestors.inject(false) {|result, c| result || (Hantek::DSOResponse.to_s == c.to_s) }
  %p
    %h2 PACKET !
  %div
    %p.etiquette
      Object class
    %p.packet
      = @datastr.class.ancestors[0].to_s
  %div
    %p.etiquette
      Hex string
    %p.packet
      = @datastr.to_hex
  %div
    %p.etiquette
      Packet inspect
    = safe_html(ap @datastr.inspect)
  %div
    %p.etiquette
      Graphic
    %div#chart_div
      %script
        loadCharts(#{@datastr.result});
  %div
    %p.etiquette
      Result
    %p.packet
      = @datastr.result

- else
  %p
    %h2 NO PACKET RECOGNIZED!
    %p.grey
      = @datastr.class.ancestors[0].to_s
  %p.packet
    - if @datastr.class.ancestors[0] == String
      = @datastr
    - elsif @datastr
      - str = ''
      - ary = @datastr.unpack('C*')
      - ary.each do |n|
        - str += (('%02x' % n.to_i.to_s(16).upcase.to_i(16))+' ')
      = str
    - else
      No packet in queue

- vfinish = Time.now
%br

%p
  = render :partial => 'send_packet'

%p ----

%p
  Rendered: #{vfinish-@vstart} sec.
